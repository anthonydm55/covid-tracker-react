{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","cardData","confirmedTitle","confirmedDesc","recoveredTitle","recoveredDesc","deathsTitle","deathsDesc","countUpData","duration","cardSize","small","medium","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","map","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a236a14d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2g6DV\",\"card\":\"Cards_card__3MSN0\",\"infected\":\"Cards_infected__umWlg\",\"recovered\":\"Cards_recovered__1S6Ho\",\"deaths\":\"Cards_deaths__V9PtE\"};","import React from \"react\";\r\nimport {Card, CardContent, Typography, Grid} from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport styles from \"./Cards.module.css\";\r\nimport cx from \"classnames\";\r\n\r\nconst cardData = [\r\n  {confirmedTitle: \"Infected\", confirmedDesc: \"Number of active cases of COVID-19\"},\r\n  {recoveredTitle: \"Recovered\", recoveredDesc: \"Number of recoveries from COVID- 19\"},\r\n  {deathsTitle: \"Deaths\", deathsDesc: \"Number of deaths from COVID-19\"},\r\n];\r\n\r\nconst countUpData = [{duration: 3}];\r\nconst cardSize = [{small: 12}, {medium: 3}];\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n  if (!confirmed) {\r\n    return \"Loading....\";\r\n  }\r\n  return (\r\n    <h1 className={styles.container}>\r\n      <Grid container spacing={1} justify='center'>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={cardSize.map(({small}) => small)}\r\n          md={cardSize.map(({medium}) => medium)}\r\n          className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color='textSecondary' gutterBottom>\r\n              {cardData.map(({confirmedTitle}) => confirmedTitle)}\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={countUpData.map(({duration}) => duration)}\r\n                separator=','></CountUp>\r\n            </Typography>\r\n            <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant='body2'>\r\n              {cardData.map(({confirmedDesc}) => confirmedDesc)}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={cardSize.map(({small}) => small)}\r\n          md={cardSize.map(({medium}) => medium)}\r\n          className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color='textSecondary' gutterBottom>\r\n              {cardData.map(({recoveredTitle}) => recoveredTitle)}\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={countUpData.map(({duration}) => duration)}\r\n                separator=','></CountUp>\r\n            </Typography>\r\n            <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant='body2'>\r\n              {cardData.map(({recoveredDesc}) => recoveredDesc)}\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={cardSize.map(({small}) => small)}\r\n          md={cardSize.map(({medium}) => medium)}\r\n          className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color='textSecondary' gutterBottom>\r\n              {cardData.map(({deathsTitle}) => deathsTitle)}\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={countUpData.map(({duration}) => duration)}\r\n                separator=','></CountUp>\r\n            </Typography>\r\n            <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n            <Typography variant='body2'>{cardData.map(({deathsDesc}) => deathsDesc)}</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </h1>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: {confirmed, recovered, deaths, lastUpdate},\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {confirmed, recovered, deaths, lastUpdate};\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const {data} = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: {countries},\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {fetchDailyData} from \"../../api\";\r\nimport {Line, Bar} from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({date}) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({confirmed}) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({deaths}) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}></Line>\r\n  ) : null;\r\n\r\n  console.log(confirmed, recovered, deaths);\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: {display: false},\r\n        title: {display: true, text: `Current state in ${country}`},\r\n      }}></Bar>\r\n  ) : null;\r\n\r\n  return <div className={styles.container}>{country ? barChart : lineChart}</div>;\r\n};\r\n\r\nexport default Chart;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport {fetchCountries} from \"../../api\";\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n        <option value=''>Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport {Cards, Chart, CountryPicker} from \"./components\";\nimport styles from \"./App.module.css\";\nimport {fetchData} from \"./api\";\n\nimport coronaImage from \"./images/image.png\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n  // The only class component in the whole project, where the states for data and country\n  // are held\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n\n    this.setState({data: fetchedData});\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n\n    this.setState({data: fetchedData, country: country});\n\n    console.log(fetchedData);\n\n    console.log(country);\n  };\n\n  render() {\n    const {data, country} = this.state;\n\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={coronaImage} alt='COVID-19'></img>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__wIVPX\",\"image\":\"App_image__oOu3n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2-MF8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2du2q\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}